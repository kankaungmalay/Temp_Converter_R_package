# load dataset
CarPrice <- read.csv("../datasets/used_cars.csv")
CarPrice
# filtering these properties
filtered_CarPrice <- filter(CarPrice, mileage < 60000 & transmission == "Manual" & fuelType == "Petrol" & tax < 200)
filtered_CarPrice
set.seed(21043727) # for reproducability!
n_subsample <- 2000
bootstrap_CarPrice <-rep(NA, n_subsample) # create an empty vector to store random samples
for(i in seq_len(n_subsample)){
index <- sample(seq_along(filtered_CarPrice$price),size=n_subsample,replace=FALSE)
bootstrap_CarPrice <- filtered_CarPrice[index,]
}
bootstrap_CarPrice
UsedCarPrice = subset(bootstrap_CarPrice, select = -c(transmission, fuelType) )
UsedCarPrice
view(dfSummary(UsedCarPrice))
# load required libraries / additional files
source("../mypackages.R")
#source("../helperFunctions.R")
#source("../flextable_extra_custom_functions.R")
source("../mypackages.R")
view(dfSummary(UsedCarPrice))
UsedCarPrice$brand <- factor(UsedCarPrice$brand, labels=c("Audi", "BMW", "Ford", "Mercedes"))
UsedCarPrice$model <- factor(UsedCarPrice$model, labels=c(
"1 Series", "2 Series", "3 Series", "4 Series", "A Class",
"A1", "A3", "A4", "A5", "B-MAX",
"B Class", "C-MAX", "C Class", "CL Class", "CLA Class",
"EcoSport", "Fiesta", "Focus", "Galaxy", "GLA Class",
"Grand C-MAX", "KA", "Ka+", "Kuga", "Mondeo",
"Mustang", "Puma", "Q2", "Q3", "S-MAX",
"SL CLASS", "TT", "X1", "X2"))
table(UsedCarPrice$year)
# UsedCarPrice$year <- factor(UsedCarPrice$year, labels=c(
#   "2008", "2009", "2011", "2012", "2013", "2014",
#   "2015", "2016", "2017", "2018",  "2019", "2020"))
UsedCarPrice$year <- factor(UsedCarPrice$year, labels=c(
"2007", "2009", "2010", "2011", "2012", "2013", "2014",
"2015", "2016", "2017", "2018",  "2019", "2020"))
flextable_describe(X=UsedCarPrice[,c(4:8)])
flextable_describe(X=UsedCarPrice[,c(4:8)])
source("../flextable_extra_custom_functions.R")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
# do not change these options
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(error = TRUE,comment=NA) # do not edit this line.
# load required libraries / additional files
source("../mypackages.R")
#source("../helperFunctions.R")
source("../flextable_extra_custom_functions.R")
if(!require("flextable")){install.packages("flextable")}
if(!require("flextable")){install.packages("flextable")}
library(flextable)
library(equatiomatic)
flextable_describe<-function(X){
# X should be the data (or subset - with selected columns) that you want to use describe function on.
Y<-psych::describe(X,quant = c(.25,.75))
Y1<-Y[,c("n","mean","median","sd","min","Q0.25","Q0.75","max")]
colnames(Y1)[colnames(Y1)=="Q0.25"]<-"1st quartile"
colnames(Y1)[colnames(Y1)=="Q0.75"]<-"3rd quartile"
# now need to add in rownames as the first column
Y2<-cbind(rownames(Y1),Y1)
colnames(Y2)[1]<-"Variable"
ret<- flextable::flextable(Y2)
ret<-flextable::colformat_num(ret,big.mark="")
ret
}
flextable_describe(X=mtcars)
# anova of an lm object
flextable_anova_lm<-function(Model){
if(sum(attributes(Model)$class=="lm")==0){
stop(print("Please provide an object of type (g)lm"))
}else{
ft5_0<-as.data.frame(anova(Model))
ft5_0$`Pr(>F)`[!is.na(ft5_0$`Pr(>F)`)][ft5_0$`Pr(>F)`[!is.na(ft5_0$`Pr(>F)`)]<.00001]<-"<.00001"
ft5_0<-cbind(rownames(ft5_0),ft5_0)
colnames(ft5_0)[1]<-"Variable"
ft5<-flextable(ft5_0)
}
ft5
}
# load required libraries / additional files
source("../mypackages.R")
source("../helperFunctions.R")
source("../flextable_extra_custom_functions.R")
library(equatiomatic)
if(!require("shiny")){install.packages("shiny")}
# do not change these options
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(error = TRUE,comment=NA) # do not edit this line.
source("../flextable_extra_custom_functions.R")
# load required libraries / additional files
source("../mypackages.R")
source("../helperFunctions.R")
source("../flextable_extra_custom_functions.R")
install.packages("shiny")
install.packages("shiny")
# do not change these options
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(error = TRUE,comment=NA) # do not edit this line.
# load required libraries / additional files
source("../mypackages.R")
source("../helperFunctions.R")
source("../flextable_extra_custom_functions.R")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
# do not change these options
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(error = TRUE,comment=NA) # do not edit this line.
# load dataset
CarPrice <- read.csv("../datasets/used_cars.csv")
CarPrice
# filtering these properties
filtered_CarPrice <- filter(CarPrice, mileage < 60000 & transmission == "Manual" & fuelType == "Petrol" & tax < 200)
filtered_CarPrice
# select a random sample of 2000 rows
set.seed(21043727) # for reproducability!
n_subsample <- 2000
bootstrap_CarPrice <-rep(NA, n_subsample) # create an empty vector to store random samples
# index <- sample(seq_along(filtered_CarPrice$price), n_subsample, replace=FALSE)
# index
# bootstrap_CarPrice <- filtered_CarPrice[index, ]
for(i in seq_len(n_subsample)){
index <- sample(seq_along(filtered_CarPrice$price),size=n_subsample,replace=FALSE)
bootstrap_CarPrice <- filtered_CarPrice[index,]
}
bootstrap_CarPrice # df with 2000 rows and 10 cols
# removing the redundant variables
UsedCarPrice = subset(bootstrap_CarPrice, select = -c(transmission, fuelType) )
UsedCarPrice # df with 2000 rows and 8 cols
filtered_CarPrice <- filter(CarPrice, mileage < 60000 & transmission == "Manual" & fuelType == "Petrol" & tax < 200)
filtered_CarPrice
filtered_CarPrice <- filter(CarPrice, mileage < 60000 & transmission == "Manual" & fuelType == "Petrol" & tax < 200)
# load dataset
CarPrice <- read.csv("../datasets/used_cars.csv")
CarPrice
filtered_CarPrice <- filter(CarPrice, mileage < 60000 & transmission == "Manual" & fuelType == "Petrol" & tax < 200)
# do not change these options
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(error = TRUE,comment=NA) # do not edit this line.
# load required libraries / additional files
source("../mypackages.R")
source("../helperFunctions.R")
source("../flextable_extra_custom_functions.R")
# load dataset
CarPrice <- read.csv("../datasets/used_cars.csv")
CarPrice
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
# do not change these options
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(error = TRUE,comment=NA) # do not edit this line.
# load required libraries / additional files
source("../mypackages.R")
source("../helperFunctions.R")
source("../flextable_extra_custom_functions.R")
source("../flextable_extra_custom_functions.R")
# load required libraries / additional files
source("../mypackages.R")
source("../helperFunctions.R")
#source("../flextable_extra_custom_functions.R")
# load dataset
CarPrice <- read.csv("../datasets/used_cars.csv")
CarPrice
# filtering these properties
filtered_CarPrice <- filter(CarPrice, mileage < 60000 & transmission == "Manual" & fuelType == "Petrol" & tax < 200)
filtered_CarPrice
# select a random sample of 2000 rows
set.seed(21043727) # for reproducability!
n_subsample <- 2000
bootstrap_CarPrice <-rep(NA, n_subsample) # create an empty vector to store random samples
# index <- sample(seq_along(filtered_CarPrice$price), n_subsample, replace=FALSE)
# index
# bootstrap_CarPrice <- filtered_CarPrice[index, ]
for(i in seq_len(n_subsample)){
index <- sample(seq_along(filtered_CarPrice$price),size=n_subsample,replace=FALSE)
bootstrap_CarPrice <- filtered_CarPrice[index,]
}
bootstrap_CarPrice # df with 2000 rows and 10 cols
# removing the redundant variables
UsedCarPrice = subset(bootstrap_CarPrice, select = -c(transmission, fuelType) )
UsedCarPrice # df with 2000 rows and 8 cols
view(dfSummary(UsedCarPrice))
UsedCarPrice$brand <- factor(UsedCarPrice$brand, labels=c("Audi", "BMW", "Ford", "Mercedes"))
UsedCarPrice$model <- factor(UsedCarPrice$model, labels=c(
"1 Series", "2 Series", "3 Series", "4 Series", "A Class",
"A1", "A3", "A4", "A5", "B-MAX",
"B Class", "C-MAX", "C Class", "CL Class", "CLA Class",
"EcoSport", "Fiesta", "Focus", "Galaxy", "GLA Class",
"Grand C-MAX", "KA", "Ka+", "Kuga", "Mondeo",
"Mustang", "Puma", "Q2", "Q3", "S-MAX",
"SL CLASS", "TT", "X1", "X2"))
table(UsedCarPrice$year)
# UsedCarPrice$year <- factor(UsedCarPrice$year, labels=c(
#   "2008", "2009", "2011", "2012", "2013", "2014",
#   "2015", "2016", "2017", "2018",  "2019", "2020"))
UsedCarPrice$year <- factor(UsedCarPrice$year, labels=c(
"2007", "2009", "2010", "2011", "2012", "2013", "2014",
"2015", "2016", "2017", "2018",  "2019", "2020"))
# summary statistics of continuous columns
flextable_describe(X=UsedCarPrice[,c(4:8)])
t1<-psych::describeBy(UsedCarPrice$price, group=UsedCarPrice$brand,quant=c(.25,.75))
TB1<-matrix(NA,nrow=max(seq_along(t1)),ncol=ncol(t1[[1]]))
rownames(TB1)<-levels(UsedCarPrice$brand)
colnames(TB1)<-colnames(t1[[1]])
for(i in seq_along(t1)){
TB1[i,]<-unlist(t1[[i]])
}
TB1<-TB1[,-1]
TB1
ggplot(data = UsedCarPrice) +
geom_bar(mapping = aes(x = brand)) +
xlab("Manufacturer of Cars") +
ggtitle("Distribution of Manufacturers")
ggplot(data = UsedCarPrice) +
geom_bar(mapping = aes(x = model)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
xlab("Models of Car") + ggtitle("Distribution of Car Models")
ggplot(UsedCarPrice, aes(x = mpg, y = log(price,base = 10))) +
geom_point() +
geom_smooth(method = "lm", se = TRUE) +
ylab("Price in GB pounds (log10)") +
xlab("Miles per gallon") +
ggtitle("Miles per gallon Vs Price in GB pounds")
ggplot(UsedCarPrice, aes(x = tax, y = log(price,base = 10) , colour = year)) +
geom_point() +
geom_smooth(method = "lm", se = TRUE) +
ylab("Price in GB pounds (log10)") +
xlab("Annual cost of vehicle tax") +
ggtitle("Annual cost of vehicle tax Vs Price")
X<-dplyr::select_if(UsedCarPrice, is.numeric)
M <- cor(X)
corrplot(M)
with(UsedCarPrice, cor(price, mpg)) # -0.6126887 (strongest negative correlation)
with(UsedCarPrice, cor(price, mileage))  # -0.5365772
with(UsedCarPrice, cor(price, engineSize))  # 0.4690952 (strongest positive correlation)
with(UsedCarPrice, cor(price, tax))  # 0.408758
model1<-lm(price ~ mpg, data=X)
as_flextable(model1)
check_model(model1)
install.packages(see)
"see"
# do not change these options
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(error = TRUE,comment=NA) # do not edit this line.
check_model(model1)
library(performance)
check_model(model1)
N <- 1000
coeff_mgp <-rep(NA,N)
# Perform bootstrap
set.seed(21043727)
for(i in seq_len(N)){
index <- sample(seq_along(X$price),size=N,replace=FALSE)
bootstrap.sample <- X[index,]
model1_boot <- lm(price ~ mpg, data=bootstrap.sample)
coeff_mgp[i] <- model1_boot$coef["mpg"]
}
Bootstrap <- data.frame(Coefficient=coeff_mgp)
ggplot(Bootstrap, aes(x=Coefficient)) +
geom_histogram(aes(y = ..density..), binwidth = .5) +
geom_density() +
ggtitle("Bootstrapped Coefficients") +
theme_bw()
library(ggplot2)
Bootstrap <- data.frame(Coefficient=coeff_mgp)
ggplot(Bootstrap, aes(x=Coefficient)) +
geom_histogram(aes(y = ..density..), binwidth = .5) +
geom_density() +
ggtitle("Bootstrapped Coefficients") +
theme_bw()
# 95% bootstrap confidence interval of slope parameter
quantile(coeff_mgp, c(.025,0.975))
# all independent variables included
model2 <- lm(price ~ ., data=X)
as_flextable(model2)
#check_model(model1)
as_flextable(model2)
# all independent variables included
model2 <- lm(price ~ ., data=X)
as_flextable(model2)
extract_eq(model2,use_coef=TRUE)
#extract_eq(model2,use_coef=TRUE)
compare_performance(model1, model2,rank = TRUE)
flextable_anova_lm(model2)
# do not change these options
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(error = TRUE,comment=NA) # do not edit this line.
# load required libraries / additional files
source("../mypackages.R")
source("../helperFunctions.R")
# load dataset
CarPrice <- read.csv("../datasets/used_cars.csv")
CarPrice
# filtering these properties
filtered_CarPrice <- filter(CarPrice, mileage < 60000 & transmission == "Manual" & fuelType == "Petrol" & tax < 200)
filtered_CarPrice
# select a random sample of 2000 rows
set.seed(21043727) # for reproducability!
n_subsample <- 2000
bootstrap_CarPrice <-rep(NA, n_subsample) # create an empty vector to store random samples
# index <- sample(seq_along(filtered_CarPrice$price), n_subsample, replace=FALSE)
# index
# bootstrap_CarPrice <- filtered_CarPrice[index, ]
for(i in seq_len(n_subsample)){
index <- sample(seq_along(filtered_CarPrice$price),size=n_subsample,replace=FALSE)
bootstrap_CarPrice <- filtered_CarPrice[index,]
}
bootstrap_CarPrice # df with 2000 rows and 10 cols
# removing the redundant variables
UsedCarPrice = subset(bootstrap_CarPrice, select = -c(transmission, fuelType) )
UsedCarPrice # df with 2000 rows and 8 cols
# checking the dataset
view(dfSummary(UsedCarPrice))
# Code factor levels for categorial variables
UsedCarPrice$brand <- factor(UsedCarPrice$brand, labels=c("Audi", "BMW", "Ford", "Mercedes"))
UsedCarPrice$model <- factor(UsedCarPrice$model, labels=c(
"1 Series", "2 Series", "3 Series", "4 Series", "A Class",
"A1", "A3", "A4", "A5", "B-MAX",
"B Class", "C-MAX", "C Class", "CL Class", "CLA Class",
"EcoSport", "Fiesta", "Focus", "Galaxy", "GLA Class",
"Grand C-MAX", "KA", "Ka+", "Kuga", "Mondeo",
"Mustang", "Puma", "Q2", "Q3", "S-MAX",
"SL CLASS", "TT", "X1", "X2"))
table(UsedCarPrice$year)
# UsedCarPrice$year <- factor(UsedCarPrice$year, labels=c(
#   "2008", "2009", "2011", "2012", "2013", "2014",
#   "2015", "2016", "2017", "2018",  "2019", "2020"))
UsedCarPrice$year <- factor(UsedCarPrice$year, labels=c(
"2007", "2009", "2010", "2011", "2012", "2013", "2014",
"2015", "2016", "2017", "2018",  "2019", "2020"))
# summary statistics of continuous columns
#flextable_describe(X=UsedCarPrice[,c(4:8)])
# Summary statistics of price of cars by each brand
t1<-psych::describeBy(UsedCarPrice$price, group=UsedCarPrice$brand,quant=c(.25,.75))
TB1<-matrix(NA,nrow=max(seq_along(t1)),ncol=ncol(t1[[1]]))
rownames(TB1)<-levels(UsedCarPrice$brand)
colnames(TB1)<-colnames(t1[[1]])
for(i in seq_along(t1)){
TB1[i,]<-unlist(t1[[i]])
}
TB1<-TB1[,-1]
# format = "html", this did not work when knitting as word file, so commented out
# TB1%>% kbl(format = "html", digits = 2) %>% kable_classic(html_font="Cambria",full_width=FALSE)
TB1
# categorical variable - brand
ggplot(data = UsedCarPrice) +
geom_bar(mapping = aes(x = brand)) +
xlab("Manufacturer of Cars") +
ggtitle("Distribution of Manufacturers")
# categorical variable - model
ggplot(data = UsedCarPrice) +
geom_bar(mapping = aes(x = model)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
xlab("Models of Car") + ggtitle("Distribution of Car Models")
# two continuous variables, the relationship between price and mpg
ggplot(UsedCarPrice, aes(x = mpg, y = log(price,base = 10))) +
geom_point() +
geom_smooth(method = "lm", se = TRUE) +
ylab("Price in GB pounds (log10)") +
xlab("Miles per gallon") +
ggtitle("Miles per gallon Vs Price in GB pounds")
# two continuous variables, the relationship between price and mileage
ggplot(UsedCarPrice, aes(x = mileage, y = log(price,base = 10))) +
geom_point() +
geom_smooth(method = "lm", se = TRUE) +
ylab("Price in GB pounds (log10)") +
xlab("Total distance covered by the car(mileage)") +
ggtitle("Mileage Vs Price")
# two continuous variables, the relationship between price and enginesize
ggplot(UsedCarPrice, aes(x = engineSize, y = price)) +
geom_point() +
geom_smooth(method = "lm", se = TRUE) +
ylab("Price in GB pounds (log10)") +
xlab("Engine Size") +
ggtitle("EngineSize Vs Price")
# two continuous variables, the relationship between price and annual vehicle tax
ggplot(UsedCarPrice, aes(x = tax, y = log(price,base = 10) , colour = year)) +
geom_point() +
geom_smooth(method = "lm", se = TRUE) +
ylab("Price in GB pounds (log10)") +
xlab("Annual cost of vehicle tax") +
ggtitle("Annual cost of vehicle tax Vs Price")
# only numeric variables
X<-dplyr::select_if(UsedCarPrice, is.numeric)
M <- cor(X)
corrplot(M)
# the linear correlation between variables price and the independent variables
with(UsedCarPrice, cor(price, mpg)) # -0.6126887 (strongest negative correlation)
with(UsedCarPrice, cor(price, mileage))  # -0.5365772
with(UsedCarPrice, cor(price, engineSize))  # 0.4690952 (strongest positive correlation)
with(UsedCarPrice, cor(price, tax))  # 0.408758
model1<-lm(price ~ mpg, data=X)
as_flextable(model1)
model1<-lm(price ~ mpg, data=X)
#as_flextable(model1)
check_model(model1)
# Set up bootstrap
N <- 1000
coeff_mgp <-rep(NA,N)
# Perform bootstrap
set.seed(21043727)
for(i in seq_len(N)){
index <- sample(seq_along(X$price),size=N,replace=FALSE)
bootstrap.sample <- X[index,]
model1_boot <- lm(price ~ mpg, data=bootstrap.sample)
coeff_mgp[i] <- model1_boot$coef["mpg"]
}
# Histogram
Bootstrap <- data.frame(Coefficient=coeff_mgp)
ggplot(Bootstrap, aes(x=Coefficient)) +
geom_histogram(aes(y = ..density..), binwidth = .5) +
geom_density() +
ggtitle("Bootstrapped Coefficients") +
theme_bw()
# 95% bootstrap confidence interval of slope parameter
quantile(coeff_mgp, c(.025,0.975))
# all independent variables included
model2 <- lm(price ~ ., data=X)
#as_flextable(model2)
check_model(model2)
# format = "html", this does not work when knitting as word file, so commented out
# compare_performance(model1, model2,rank = TRUE) %>%
#   kbl(caption = "Model Performance Comparison") %>%
#   kable_classic(full_width = F)
compare_performance(model1, model2,rank = TRUE)
#flextable_anova_lm(model2)
# check_model(model1) # to do: check the required package to be installed
# all independent variables included
model2 <- lm(price ~ ., data=X)
#as_flextable(model2)
#extract_eq(model2,use_coef=TRUE)
#check_model(model2) # to do: check the required package to be installed
# format = "html", this does not work when knitting as word file, so commented out
# compare_performance(model1, model2,rank = TRUE) %>%
#   kbl(caption = "Model Performance Comparison") %>%
#   kable_classic(full_width = F)
compare_performance(model1, model2,rank = TRUE)
#flextable_anova_lm(model2)
model3 <- lm(log(price) ~ ., data=X)
as_flextable(model3)
#
# compare_performance(model1, model2, model3,rank = TRUE) %>%
#   kbl(caption = "Model Performance Comparison") %>%
#   kable_classic(full_width = F, html_font = "Cambria")
model3 <- lm(log(price) ~ ., data=X)
# as_flextable(model3)
#
# compare_performance(model1, model2, model3,rank = TRUE) %>%
#   kbl(caption = "Model Performance Comparison") %>%
#   kable_classic(full_width = F, html_font = "Cambria")
tinytex::install_tinytex()
# load dataset
CarPrice <- read.csv("../datasets/used_cars.csv")
head(CarPrice)
# filtering these properties
filtered_CarPrice <- filter(CarPrice, mileage < 60000 & transmission == "Manual" & fuelType == "Petrol" & tax < 200)
head(filtered_CarPrice)
# select a random sample of 2000 rows
set.seed(21043727) # for reproducability!
n_subsample <- 2000
bootstrap_CarPrice <-rep(NA, n_subsample) # create an empty vector to store random samples
# index <- sample(seq_along(filtered_CarPrice$price), n_subsample, replace=FALSE)
# index
# bootstrap_CarPrice <- filtered_CarPrice[index, ]
for(i in seq_len(n_subsample)){
index <- sample(seq_along(filtered_CarPrice$price),size=n_subsample,replace=FALSE)
bootstrap_CarPrice <- filtered_CarPrice[index,]
}
head(bootstrap_CarPrice) # df with 2000 rows and 10 cols
# removing the redundant variables
UsedCarPrice = subset(bootstrap_CarPrice, select = -c(transmission, fuelType) )
head(UsedCarPrice) # df with 2000 rows and 8 cols
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("roxygen2")
install.packages("roxygen2")
install.packages("roxygen2")
library(devtools);
library(devtools)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools);
setwd("~/github/data_analyzing_playground/r-statistics/creating_r_package/Temp_Converter_R_package")
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
install.packages("devtools")
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
setwd("~/github/data_analyzing_playground/r-statistics/creating_r_package/Temp_Converter_R_package")
load_all("."); # Working directory should be in the package SCC_R_package
setwd("~/github/data_analyzing_playground/r-statistics/creating_r_package/Temp_Converter_R_package/R")
load_all("."); # Working directory should be in the package SCC_R_package
F_to_C(79);
load_all("."); # Working directory should be in the package SCC_R_package
warning()
load_all("."); # Working directory should be in the package SCC_R_package
F_to_C(79);
setwd("~/github/data_analyzing_playground/r-statistics/creating_r_package/Temp_Converter_R_package")
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
F_to_C(79);
C_to_F(20);
